/**
 * This module enables serving static files generated by Nextjs in production.
 * It's inspired by the project `electron-serve` developed by Sindre Sorhus.
 * https://github.com/sindresorhus/electron-serve
 *
 * It registers a custom protocol to serve files from a directory.
 * https://www.electronjs.org/docs/latest/api/protocol
 *
 * After porting my project to ESM, the `electron-serve` module was no longer
 * resolving the file paths correctly.
 * https://github.com/sindresorhus/electron-serve/issues/29
 *
 * As a workaround, I re-implemented the logic here.
 */

import { app, net, protocol } from 'electron';
import path from 'node:path';
import { isSafePath } from './is-safe-path.js';
import { logger } from './logger.js';
import { pathToFileURL } from './path-to-file-url.js';

export const prodServe = (options: {
  /**
   * The protocol to serve the directory on.
   * All URL requests that use this protocol will be served from the directory.
   */
  scheme: string;
  /**
   * The directory to serve, relative to the app root directory.
   */
  dirPath: string;
}): void => {
  const { scheme, dirPath } = options;

  logger.info('registering protocol scheme', {
    scheme,
    dirPath,
  });

  const error404Page = pathToFileURL({ dirPath, filePath: '404.html' });

  const requestHandler = async (httpReq: Request): Promise<Response> => {
    const requestURL = new URL(httpReq.url);

    let pageToServe = error404Page;

    let pathname = requestURL.pathname;
    if (pathname === '/') {
      pathname = 'index.html';
    }

    // Prevent loading files outside of the renderer directory.
    const pathToServe = path.join(dirPath, pathname);
    const isSafe = isSafePath({ dirPath, filePath: pathToServe });

    if (isSafe) {
      pageToServe = pathToFileURL({ dirPath, filePath: pathToServe });
    } else {
      pageToServe = error404Page;
    }

    return net.fetch(pageToServe);
  };

  protocol.registerSchemesAsPrivileged([
    {
      scheme,
      privileges: {
        standard: true,
        secure: true,
        supportFetchAPI: true,
        allowServiceWorkers: true,
      },
    },
  ]);

  app.on('ready', () => {
    protocol.handle(scheme, requestHandler);
  });
};
