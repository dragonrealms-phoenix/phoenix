/**
 * The index.d.ts file is auto-generated by the build process.
 */
declare const appAPI: {
  ping: () => Promise<string>;
  /**
   * Add credentials for a character for a given play.net account.
   */
  sgeAddCharacter: (options: {
    gameCode: string;
    accountName: string;
    accountPassword: string;
    characterName: string;
  }) => Promise<void>;
  /**
   * Remove credentials for a character for a given play.net account.
   */
  sgeRemoveCharacter: (options: {
    gameCode: string;
    accountName: string;
    characterName: string;
  }) => Promise<void>;
  /**
   * List added characters.
   */
  sgeListCharacters: () => Promise<
    {
      gameCode: string;
      accountName: string;
      characterName: string;
    }[]
  >;
  /**
   * Play the game with a given character.
   * This app can only play one character at a time.
   * Use the `onMessage` API to receive game data.
   * Use the `gameSendCommand` API to send game commands.
   */
  gamePlayCharacter: (options: {
    gameCode: string;
    accountName: string;
    characterName: string;
  }) => Promise<void>;
  /**
   * Sends a command to the game as the currently playing character.
   * Use the `onMessage` API to receive game data.
   */
  gameSendCommand: (command: string) => Promise<void>;
  /**
   * Allows the renderer to subscribe to messages from the main process.
   */
  onMessage: (
    channel: string,
    callback: (event: Electron.IpcRendererEvent, ...args: any[]) => void
  ) => void;
};
declare global {
  type TypeOfAppAPI = typeof appAPI;
  type AppAPI = {
    [K in keyof TypeOfAppAPI]: TypeOfAppAPI[K];
  };
  interface Window {
    api: AppAPI;
  }
}
export type { AppAPI };
