/**
 * The index.d.ts file is auto-generated by the build process.
 */
declare const appAPI: {
  ping: () => Promise<string>;
  /**
   * Add credentials for a given play.net account.
   */
  sgeAddAccount: (options: {
    gameCode: string;
    username: string;
    password: string;
  }) => Promise<void>;
  /**
   * Remove credentials for a given play.net account.
   */
  sgeRemoveAccount: (options: {
    gameCode: string;
    username: string;
  }) => Promise<void>;
  /**
   * List saved play.net accounts.
   */
  sgeListAccounts: (options: { gameCode: string }) => Promise<
    {
      gameCode: string;
      username: string;
    }[]
  >;
  /**
   * List available characters for a given play.net account.
   */
  sgeListCharacters: (options: {
    gameCode: string;
    username: string;
  }) => Promise<
    {
      id: string;
      name: string;
    }[]
  >;
  /**
   * Play the game with a given character.
   * This app can only play one character at a time.
   * Use the `onMessage` API to receive game data.
   */
  gamePlayCharacter: (options: {
    gameCode: string;
    username: string;
    characterName: string;
  }) => Promise<void>;
  /**
   * Sends a command to the game as the currently playing character.
   * Use the `onMessage` API to receive game data.
   */
  gameSendCommand: (command: string) => Promise<void>;
  /**
   * Allows the renderer to subscribe to messages from the main process.
   */
  onMessage: (
    channel: string,
    callback: (event: Electron.IpcRendererEvent, ...args: any[]) => void
  ) => void;
};
declare global {
  type TypeOfAppAPI = typeof appAPI;
  type AppAPI = {
    [K in keyof TypeOfAppAPI]: TypeOfAppAPI[K];
  };
  interface Window {
    api: AppAPI;
  }
}
export type { AppAPI };
