import type { IpcRendererEvent } from 'electron';
import { contextBridge, ipcRenderer } from 'electron';

/**
 * The index.d.ts file is auto-generated by the build process.
 */

// Custom APIs for renderer.
// Proxies request to the main process then returns any response.
const appAPI = {
  ping: async (): Promise<string> => {
    return ipcRenderer.invoke('ping');
  },
  /**
   * Add credentials for a given play.net account.
   */
  sgeAddAccount: async (options: {
    gameCode: string;
    username: string;
    password: string;
  }): Promise<void> => {
    return ipcRenderer.invoke('sgeAddAccount', options);
  },
  /**
   * Remove credentials for a given play.net account.
   */
  sgeRemoveAccount: async (options: {
    gameCode: string;
    username: string;
  }): Promise<void> => {
    return ipcRenderer.invoke('sgeRemoveAccount', options);
  },
  /**
   * List saved play.net accounts.
   */
  sgeListAccounts: async (options: {
    gameCode: string;
  }): Promise<
    Array<{
      gameCode: string;
      username: string;
    }>
  > => {
    return ipcRenderer.invoke('sgeListAccounts', options);
  },
  /**
   * List available characters for a given play.net account.
   */
  sgeListCharacters: async (options: {
    gameCode: string;
    username: string;
  }): Promise<
    Array<{
      id: string;
      name: string;
    }>
  > => {
    return ipcRenderer.invoke('sgeListCharacters', options);
  },
  /**
   * Play the game with a given character.
   * This app can only play one character at a time.
   * Use the `onMessage` API to receive game data.
   */
  gamePlayCharacter: async (options: {
    gameCode: string;
    username: string;
    characterName: string;
  }): Promise<void> => {
    return ipcRenderer.invoke('gamePlayCharacter', options);
  },
  /**
   * Sends a command to the game as the currently playing character.
   * Use the `onMessage` API to receive game data.
   */
  gameSendCommand: async (command: string): Promise<void> => {
    return ipcRenderer.invoke('gameSendCommand', command);
  },
  /**
   * Allows the renderer to subscribe to messages from the main process.
   */
  onMessage: (
    channel: string,
    callback: (event: IpcRendererEvent, ...args: Array<any>) => void
  ) => {
    ipcRenderer.on(channel, callback);
  },
};

declare global {
  type TypeOfAppAPI = typeof appAPI;

  type AppAPI = {
    [K in keyof TypeOfAppAPI]: TypeOfAppAPI[K];
  };

  interface Window {
    api: AppAPI;
  }
}

contextBridge.exposeInMainWorld('api', appAPI);

export type { AppAPI };
