import { contextBridge, ipcRenderer } from 'electron';

/**
 * The index.d.ts file is auto-generated by the build process.
 */

// Custom APIs for renderer.
// Proxies request to the main process then returns any response.
const appAPI = {
  ping: async (): Promise<string> => {
    return ipcRenderer.invoke('ping');
  },
  /**
   * List available characters for a given play.net account.
   */
  sgeListCharacters: async (options: {
    username: string;
    password: string;
    gameCode: string;
  }): Promise<Array<{ id: string; name: string }>> => {
    return ipcRenderer.invoke('sgeListCharacters', options);
  },
  /**
   * Log in to game with a given character.
   */
  sgePlayCharacter: async (options: {
    username: string;
    password: string;
    gameCode: string;
    characterName: string;
  }): Promise<void> => {
    return ipcRenderer.invoke('sgePlayCharacter', options);
  },
};

declare global {
  type TypeOfAppAPI = typeof appAPI;

  type AppAPI = {
    [K in keyof TypeOfAppAPI]: TypeOfAppAPI[K];
  };

  interface Window {
    api: AppAPI;
  }
}

contextBridge.exposeInMainWorld('api', appAPI);

export type { AppAPI };
